---
import Layout from "../../layouts/Layout.astro";
import { getAllBlog } from "../../lib/microcms";
const blogs = await getAllBlog();

const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString("ja-JP", {
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    timeZone: "Asia/Tokyo",
  });
};

const categories = [
  { id: "all", label: "All" },
  { id: "Programming", label: "Programming" },
  { id: "Coffee", label: "Coffee" },
  { id: "Design", label: "Design" },
  { id: "DailyLife", label: "Daily Life" }
];

---

<Layout title="Blog">
  <div class="blog-page">
    <h1>Blog</h1>
    
    <!-- Category Filter -->
    <div class="category-filter">
      <nav class="filter-nav" id="filter-nav">
        {categories.map((category) => (
          <button 
            class="filter-button" 
            data-category={category.id}
            data-label={category.label}
          >
            {category.label}
          </button>
        ))}
        <span class="filter-indicator" id="filter-indicator"></span>
      </nav>
    </div>

    {
      blogs === null && (
        <p>
          記事の取得に失敗しました。環境変数やネットワークを確認してください。
        </p>
      )
    }
    {blogs && blogs.totalCount === 0 && <p>投稿はまだありません。</p>}
    {blogs && blogs.totalCount > 0 && (
      <div class="blog-grid">
        {blogs.contents.map((blog) => (
          <article class="blog-card" data-category={blog.category}>
            <a href={`/blog/${blog.slug}`} class="card-link">
              {blog.thumbnail && (
                <div class="card-thumbnail">
                  <img src={blog.thumbnail.url} alt={blog.title} />
                </div>
              )}
              <div class="card-content">
                <h2 class="card-title">{blog.title}</h2>
                {blog.summary && (
                  <p class="card-summary">{blog.summary}</p>
                )}
                <time class="card-date">{formatDate(blog.publishedAt)}</time>
              </div>
            </a>
          </article>
        ))}
      </div>
    )}
  </div>
</Layout>

<style>
  .blog-page {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .blog-page h1 {
    color: #006367;
    margin-bottom: 2rem;
    text-align: center;
  }

  .category-filter {
    margin-bottom: 3rem;
    display: flex;
    justify-content: center;
    padding: 0 2rem;
  }

  .filter-nav {
    position: relative;
    display: flex;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 12px;
    padding: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(6px);
  }

  .filter-button {
    position: relative;
    background: none;
    border: none;
    padding: 12px 20px;
    font-size: 14px;
    font-weight: 600;
    color: #6b7280;
    cursor: pointer;
    border-radius: 8px;
    transition: color 0.2s ease;
    z-index: 2;
  }

  .filter-button:hover {
    color: #111827;
  }

  .filter-button.active {
    color: #111827;
  }

  .filter-indicator {
    position: absolute;
    top: 8px;
    left: 8px;
    height: calc(100% - 16px);
    background: radial-gradient(120% 120% at 50% 0%, rgba(255,255,255,0.7) 0%, rgba(255,255,255,0.35) 60%, rgba(255,255,255,0.2) 100%), rgba(17,24,39,0.06);
    border: 1px solid rgba(17,24,39,0.08);
    border-radius: 16px;
    transition: transform .4s cubic-bezier(.16,.84,.44,1), width .4s cubic-bezier(.16,.84,.44,1), opacity .3s ease;
    opacity: 0;
    transform: translateX(0);
    pointer-events: none;
    backdrop-filter: blur(10px) saturate(140%);
    box-shadow: inset 0 1px 0 rgba(255,255,255,0.4), 0 6px 18px rgba(0,0,0,0.08);
    z-index: 0;
  }

  .filter-indicator.visible {
    opacity: 1;
  }

  .blog-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
  }

  @media (min-width: 768px) {
    .blog-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  .blog-card {
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .blog-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
  }

  .card-link {
    display: block;
    text-decoration: none;
    color: inherit;
    height: 100%;
  }

  .card-thumbnail {
    width: 100%;
    height: 200px;
    overflow: hidden;
  }

  .card-thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.2s ease;
  }

  .blog-card:hover .card-thumbnail img {
    transform: scale(1.05);
  }

  .card-content {
    padding: 1.5rem;
  }

  .card-title {
    font-size: 1.25rem;
    font-weight: 700;
    color: #111827;
    margin: 0 0 0.75rem 0;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .card-summary {
    color: #6b7280;
    font-size: 0.9rem;
    line-height: 1.5;
    margin: 0 0 1rem 0;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .card-date {
    color: #9ca3af;
    font-size: 0.85rem;
    font-weight: 500;
  }

  .blog-card.hidden {
    opacity: 0;
    transform: rotateY(90deg) scale(0.8);
    pointer-events: none;
    position: absolute;
    width: 0;
    height: 0;
    overflow: hidden;
  }

  .blog-card {
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    transform-origin: center;
    transform-style: preserve-3d;
  }

  .blog-card.animating {
    animation: flipOut 0.8s ease-in-out forwards;
  }

  .blog-card.animating-in {
    animation: flipIn 0.8s ease-in-out forwards;
  }

  @keyframes flipOut {
    0% {
      opacity: 1;
      transform: rotateY(0deg) scale(1);
    }
    50% {
      opacity: 0;
      transform: rotateY(90deg) scale(0.8);
    }
    100% {
      opacity: 0;
      transform: rotateY(90deg) scale(0.8);
    }
  }

  @keyframes flipIn {
    0% {
      opacity: 0;
      transform: rotateY(-90deg) scale(0.8);
    }
    50% {
      opacity: 0;
      transform: rotateY(-90deg) scale(0.8);
    }
    100% {
      opacity: 1;
      transform: rotateY(0deg) scale(1);
    }
  }

  @media (max-width: 767px) {
    .blog-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }
    
    .card-content {
      padding: 1.25rem;
    }
    
    .card-thumbnail {
      height: 180px;
    }

    .filter-nav {
      flex-wrap: wrap;
      gap: 4px;
    }

    .filter-button {
      padding: 8px 16px;
      font-size: 13px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const filterButtons = document.querySelectorAll('.filter-button');
    const filterIndicator = document.getElementById('filter-indicator');
    const filterNav = document.getElementById('filter-nav');
    const blogCards = document.querySelectorAll('.blog-card');

    // 初期状態でAllをアクティブにする
    const allButton = document.querySelector('[data-category="all"]');
    if (allButton) {
      allButton.classList.add('active');
      updateIndicator(allButton, true);
    }

    // ヘッダーと同じホバーインジケーター実装
    filterNav.addEventListener('mouseleave', function() {
      filterIndicator.classList.remove('visible');
    });

    filterButtons.forEach(button => {
      // ホバー時のインジケーター表示
      button.addEventListener('mouseenter', function() {
        updateIndicator(this, true);
      });

      // クリック時のフィルタリング
      button.addEventListener('click', function() {
        const category = this.getAttribute('data-category');
        
        // アクティブ状態を更新
        filterButtons.forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
        
        // インジケーターを更新
        updateIndicator(this, true);
        
        // カードをフィルタリング（アニメーション付き）
        filterCardsWithAnimation(category);
      });
    });

    function updateIndicator(activeButton, show = false) {
      const rect = activeButton.getBoundingClientRect();
      const navRect = filterNav.getBoundingClientRect();
      
      const left = rect.left - navRect.left - 6;
      const width = rect.width + 12;
      
      filterIndicator.style.left = left + 'px';
      filterIndicator.style.width = width + 'px';
      
      if (show) {
        filterIndicator.classList.add('visible');
      }
    }

    function filterCardsWithAnimation(category) {
      // まず全てのカードにアウトアニメーションを適用
      blogCards.forEach(card => {
        const cardCategory = card.getAttribute('data-category');
        
        if (category === 'all' || cardCategory === category) {
          // 表示するカードはアウトアニメーション
          card.classList.add('animating');
        } else {
          // 非表示にするカードは即座に隠す
          card.classList.add('hidden');
        }
      });

      // アウトアニメーション完了後にインアニメーションを開始
      setTimeout(() => {
        blogCards.forEach(card => {
          const cardCategory = card.getAttribute('data-category');
          
          if (category === 'all' || cardCategory === category) {
            // アウトアニメーションを削除してインアニメーションを追加
            card.classList.remove('animating');
            card.classList.remove('hidden');
            card.classList.add('animating-in');
            
            // インアニメーション完了後にクラスをクリア
            setTimeout(() => {
              card.classList.remove('animating-in');
            }, 800);
          }
        });
      }, 400); // アウトアニメーションの半分の時間で切り替え
    }
  });
</script>
