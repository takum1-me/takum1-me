---
import { getAllBlog, getBlogById } from "../../lib/microcms";
import Layout from "../../layouts/Layout.astro";
import BlogToc from "../../components/BlogToc.tsx";

export async function getStaticPaths() {
  try {
    const blogs = await getAllBlog();
    return blogs.contents.map((blog: { slug: string }) => ({
      params: { slug: blog.slug },
    }));
  } catch (error) {
    console.error("Failed to fetch blogs:", error);
    // 環境変数が設定されていない場合は空の配列を返す
    return [];
  }
}

const { slug } = Astro.params;
const blog = await getBlogById(slug);

// ブログが見つからない場合は404を返す
if (!blog) {
  return Astro.redirect("/404");
}

const { publishedAt, title, content, thumbnail } = blog;
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString("ja-JP", {
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    timeZone: "Asia/Tokyo",
  });
};
---

<Layout title={title}>
  <main class="blog-main">
    <div class="blog-container">
      <div class="page">
        <div class="article-container">
          <p class="back"><a href="/blog">← ブログ一覧に戻る</a></p>
          <div class="title-date">
            <h1 class="article-title">{title}</h1>
            <p class="published-date">{formatDate(publishedAt)}</p>
          </div>
          {thumbnail && <img src={thumbnail.url} alt={title} />}
          <div class="article-content" set:html={content} />
        </div>
      </div>
      <div class="toc-container">
        <BlogToc client:only="react" />
      </div>
    </div>
  </main>
</Layout>

<style>
  .blog-main {
    min-height: 100vh;
  }
  
  .blog-container {
    display: flex;
    gap: 40px;
    align-items: flex-start;
    max-width: 100vw; /* 画面全幅を使用 */
    margin: 0 auto;
    padding: 0 20px;
  }
  
  .page { 
    flex: 0 0 75%; /* 画面の75%を記事に割り当て */
    min-width: 0;
  }
  
  .toc-container {
    flex: 0 0 25%; /* 画面の25%をTOCに割り当て */
    position: relative;
  }
  
  .article-container {
    width: 100%;
    max-width: none;
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  @media (max-width: 1024px) { 
    .blog-container { 
      flex-direction: column; 
      gap: 20px;
      max-width: 100vw; /* 小さい画面では全幅使用 */
      padding: 0 20px;
    }
    
    .page {
      flex: none;
      max-width: none;
    }
    
    .toc-container {
      flex: none;
      display: none; /* 小さい画面ではTOCを非表示 */
    }
  }
  
  /* 中サイズ画面での調整 */
  @media (min-width: 1025px) and (max-width: 1400px) {
    .blog-container {
      max-width: 100vw; /* 画面全幅を使用 */
    }
    
    .page {
      flex: 0 0 75%; /* 75%を維持 */
    }
    
    .toc-container {
      flex: 0 0 25%; /* 25%を維持 */
    }
  }
  @media (min-width: 768px) {
    .article-container { max-width: 760px; padding: 0 2rem; }
  }
  h1 {
    color: #006367;
  }
  .article-content {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {

    }
    .published-date {
      color: #006367;
    }
    /* content内の画像にスタイルを適用 */
    img {
      width: 100%;
      height: auto;
      max-width: 100%;
      display: block;
      margin: 1rem 0;
    }
  }
  /* サムネイル画像のレスポンシブ対応 */
  img {
    width: 100%;
    height: auto;
    max-width: 100%;
  }

  .back {
    margin: 0.5rem 0 1rem;
  }
  .back a {
    color: #374151;
    text-decoration: none;
    font-weight: 600;
  }
  .back a:hover {
    text-decoration: underline;
    text-underline-offset: 3px;
  }

  /* ▼▼▼ ここから変更 ▼▼▼ */
  .title-date {
    display: flex;
    /* Flexboxを有効にする */
    justify-content: space-between; /* 両端に配置する */
    align-items: flex-end;
    /* 下端で揃える */
    gap: 1rem; /* タイトルと日付の間に最低限の隙間を設ける */
    margin-bottom: 1rem;
  }

  .title-date h1 {
    margin: 0; /* h1のデフォルトマージンをリセット */
    margin-bottom: 0;
    /* 元のmargin-bottomを削除 */
  }

  .title-date p {
    /* position: absolute;
     を削除 */
    margin: 0;
    color: #64a19e;
    font-size: 0.9rem;
    white-space: nowrap;
    /* 日付が改行しないようにする */
    flex-shrink: 0; /* コンテナが狭くなっても日付部分が縮まないようにする */
    margin-bottom: 0.4rem;
  }
</style>
